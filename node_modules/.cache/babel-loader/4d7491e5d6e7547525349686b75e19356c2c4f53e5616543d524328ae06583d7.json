{"ast":null,"code":"var _jsxFileName = \"/Users/jellyfish/Desktop/job_assignments/tekkare_assignment/tekkare_assignment/src/components/HospitalChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Card from './Card';\nimport KPIChart from './KPIChart';\nimport { useTranslation } from 'react-i18next';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HospitalChart = () => {\n  _s();\n  const {\n    t,\n    i18n\n  } = useTranslation();\n  const [hospitals, setHospitals] = useState([]);\n  const [selectedHospital, setSelectedHospital] = useState(null);\n  useEffect(() => {\n    axios.get('/data_exemple1.JSON').then(response => {\n      setHospitals(response.data);\n    }).catch(error => {\n      console.error('Error fetching the hospital data:', error);\n    });\n  }, []);\n  const handleSelectHospital = hospital => {\n    setSelectedHospital(hospital);\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    title: \"Hospitalizations by Hospital\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mx-auto p-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl font-bold mb-8 text-center\",\n        children: t(\"hospitalizations\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"hospital-select\",\n          className: \"block mb-2\",\n          children: t(\"select\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"hospital-select\",\n          className: \"block w-full p-2 border rounded\",\n          onChange: e => {\n            const hospitalName = e.target.value;\n            const selected = hospitals.find(hospital => hospital.name === hospitalName);\n            if (selected) handleSelectHospital(selected);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"-- Select a hospital --\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 17\n          }, this), hospitals.map(hospital => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: hospital.name,\n            children: hospital.name\n          }, hospital.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 21\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this), selectedHospital && /*#__PURE__*/_jsxDEV(KPIChart, {\n        title: `Monthly Hospitalizations at ${selectedHospital.name}`,\n        data: selectedHospital.monthlyHospitalizations.map(hosp => hosp.value),\n        labels: selectedHospital.monthlyHospitalizations.map(hosp => `${hosp.month} ${hosp.year}`)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(HospitalChart, \"zwXmBR5WgneBXz00obw6klB0E+I=\", false, function () {\n  return [useTranslation];\n});\n_c = HospitalChart;\nexport default HospitalChart;\nvar _c;\n$RefreshReg$(_c, \"HospitalChart\");","map":{"version":3,"names":["React","useEffect","useState","axios","Card","KPIChart","useTranslation","jsxDEV","_jsxDEV","HospitalChart","_s","t","i18n","hospitals","setHospitals","selectedHospital","setSelectedHospital","get","then","response","data","catch","error","console","handleSelectHospital","hospital","title","children","className","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","e","hospitalName","target","value","selected","find","name","map","monthlyHospitalizations","hosp","labels","month","year","_c","$RefreshReg$"],"sources":["/Users/jellyfish/Desktop/job_assignments/tekkare_assignment/tekkare_assignment/src/components/HospitalChart.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Card from './Card';\nimport KPIChart from './KPIChart';\nimport { useTranslation } from 'react-i18next';\n\n\ninterface MonthlyHospitalization {\n  month: string;\n  year: number;\n  value: number;\n}\n\ninterface Hospital {\n  name: string;\n  monthlyHospitalizations: MonthlyHospitalization[];\n}\n\nconst HospitalChart: React.FC = () => {\n  const { t, i18n } = useTranslation();\n\n  const [hospitals, setHospitals] = useState<Hospital[]>([]);\n  const [selectedHospital, setSelectedHospital] = useState<Hospital | null>(null);\n\n  useEffect(() => {\n    axios\n      .get('/data_exemple1.JSON')\n      .then(response => {\n        setHospitals(response.data);\n      })\n      .catch(error => {\n        console.error('Error fetching the hospital data:', error);\n      });\n  }, []);\n\n  const handleSelectHospital = (hospital: Hospital) => {\n    setSelectedHospital(hospital);\n  };\n\n  return (\n    <Card title=\"Hospitalizations by Hospital\">\n        <div className=\"container mx-auto p-8\">\n            <h1 className=\"text-3xl font-bold mb-8 text-center\">{t(\"hospitalizations\")}</h1>\n\n            <div className=\"mb-6\">\n                <label htmlFor=\"hospital-select\" className=\"block mb-2\">{t(\"select\")}</label>\n                <select\n                id=\"hospital-select\"\n                className=\"block w-full p-2 border rounded\"\n                onChange={e => {\n                    const hospitalName = e.target.value;\n                    const selected = hospitals.find(hospital => hospital.name === hospitalName);\n                    if (selected) handleSelectHospital(selected);\n                }}\n                >\n                <option value=\"\">-- Select a hospital --</option>\n                {hospitals.map(hospital => (\n                    <option key={hospital.name} value={hospital.name}>\n                    {hospital.name}\n                    </option>\n                ))}\n                </select>\n            </div>\n\n            {selectedHospital && (\n                <KPIChart\n                title={`Monthly Hospitalizations at ${selectedHospital.name}`}\n                data={selectedHospital.monthlyHospitalizations.map(hosp => hosp.value)}\n                labels={selectedHospital.monthlyHospitalizations.map(hosp => `${hosp.month} ${hosp.year}`)}\n                />\n            )}\n        </div>\n    </Card>\n  );\n};\n\nexport default HospitalChart;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,QAAQ,MAAM,YAAY;AACjC,SAASC,cAAc,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAc/C,MAAMC,aAAuB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpC,MAAM;IAAEC,CAAC;IAAEC;EAAK,CAAC,GAAGN,cAAc,CAAC,CAAC;EAEpC,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAa,EAAE,CAAC;EAC1D,MAAM,CAACa,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGd,QAAQ,CAAkB,IAAI,CAAC;EAE/ED,SAAS,CAAC,MAAM;IACdE,KAAK,CACFc,GAAG,CAAC,qBAAqB,CAAC,CAC1BC,IAAI,CAACC,QAAQ,IAAI;MAChBL,YAAY,CAACK,QAAQ,CAACC,IAAI,CAAC;IAC7B,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IAC3D,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,oBAAoB,GAAIC,QAAkB,IAAK;IACnDT,mBAAmB,CAACS,QAAQ,CAAC;EAC/B,CAAC;EAED,oBACEjB,OAAA,CAACJ,IAAI;IAACsB,KAAK,EAAC,8BAA8B;IAAAC,QAAA,eACtCnB,OAAA;MAAKoB,SAAS,EAAC,uBAAuB;MAAAD,QAAA,gBAClCnB,OAAA;QAAIoB,SAAS,EAAC,qCAAqC;QAAAD,QAAA,EAAEhB,CAAC,CAAC,kBAAkB;MAAC;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAEhFxB,OAAA;QAAKoB,SAAS,EAAC,MAAM;QAAAD,QAAA,gBACjBnB,OAAA;UAAOyB,OAAO,EAAC,iBAAiB;UAACL,SAAS,EAAC,YAAY;UAAAD,QAAA,EAAEhB,CAAC,CAAC,QAAQ;QAAC;UAAAkB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC7ExB,OAAA;UACA0B,EAAE,EAAC,iBAAiB;UACpBN,SAAS,EAAC,iCAAiC;UAC3CO,QAAQ,EAAEC,CAAC,IAAI;YACX,MAAMC,YAAY,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK;YACnC,MAAMC,QAAQ,GAAG3B,SAAS,CAAC4B,IAAI,CAAChB,QAAQ,IAAIA,QAAQ,CAACiB,IAAI,KAAKL,YAAY,CAAC;YAC3E,IAAIG,QAAQ,EAAEhB,oBAAoB,CAACgB,QAAQ,CAAC;UAChD,CAAE;UAAAb,QAAA,gBAEFnB,OAAA;YAAQ+B,KAAK,EAAC,EAAE;YAAAZ,QAAA,EAAC;UAAuB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EAChDnB,SAAS,CAAC8B,GAAG,CAAClB,QAAQ,iBACnBjB,OAAA;YAA4B+B,KAAK,EAAEd,QAAQ,CAACiB,IAAK;YAAAf,QAAA,EAChDF,QAAQ,CAACiB;UAAI,GADDjB,QAAQ,CAACiB,IAAI;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAElB,CACX,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC,EAELjB,gBAAgB,iBACbP,OAAA,CAACH,QAAQ;QACTqB,KAAK,EAAE,+BAA+BX,gBAAgB,CAAC2B,IAAI,EAAG;QAC9DtB,IAAI,EAAEL,gBAAgB,CAAC6B,uBAAuB,CAACD,GAAG,CAACE,IAAI,IAAIA,IAAI,CAACN,KAAK,CAAE;QACvEO,MAAM,EAAE/B,gBAAgB,CAAC6B,uBAAuB,CAACD,GAAG,CAACE,IAAI,IAAI,GAAGA,IAAI,CAACE,KAAK,IAAIF,IAAI,CAACG,IAAI,EAAE;MAAE;QAAAnB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1F,CACJ;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEX,CAAC;AAACtB,EAAA,CAxDID,aAAuB;EAAA,QACPH,cAAc;AAAA;AAAA2C,EAAA,GAD9BxC,aAAuB;AA0D7B,eAAeA,aAAa;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}