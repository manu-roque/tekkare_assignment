{"ast":null,"code":"var _jsxFileName = \"/Users/jellyfish/Desktop/job_assignments/tekkare_assignment/tekkare_assignment/src/components/HospitalChart.tsx\",\n  _s = $RefreshSig$();\n// src/components/HospitalChart.tsx\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport KPIChart from './KPIChart';\n\n// Define types for better TypeScript support\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HospitalChart = () => {\n  _s();\n  const [hospitals, setHospitals] = useState([]);\n  const [selectedHospital, setSelectedHospital] = useState(null);\n\n  // Fetch data using Axios\n  useEffect(() => {\n    axios.get('/path/to/data_exemple1.JSON').then(response => {\n      setHospitals(response.data); // Assuming data_exemple1.JSON is a list of hospitals\n    }).catch(error => {\n      console.error('Error fetching the hospital data:', error);\n    });\n  }, []);\n\n  // Handle hospital selection\n  const handleSelectHospital = hospital => {\n    setSelectedHospital(hospital);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto p-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold mb-8 text-center\",\n      children: \"Hospitalizations by Hospital\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"hospital-select\",\n        className: \"block mb-2\",\n        children: \"Select a hospital:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"hospital-select\",\n        className: \"block w-full p-2 border rounded\",\n        onChange: e => {\n          const hospitalName = e.target.value;\n          const selected = hospitals.find(hospital => hospital.name === hospitalName);\n          if (selected) handleSelectHospital(selected);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"-- Select a hospital --\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), hospitals.map(hospital => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: hospital.name,\n          children: hospital.name\n        }, hospital.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), selectedHospital && /*#__PURE__*/_jsxDEV(KPIChart, {\n      title: `Monthly Hospitalizations at ${selectedHospital.name}`,\n      data: selectedHospital.monthlyHospitalizations.map(hosp => hosp.value),\n      labels: selectedHospital.monthlyHospitalizations.map(hosp => `${hosp.month} ${hosp.year}`)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(HospitalChart, \"kH4q7QJPWKpZneXuPmOF2fZjw2g=\");\n_c = HospitalChart;\nexport default HospitalChart;\nvar _c;\n$RefreshReg$(_c, \"HospitalChart\");","map":{"version":3,"names":["React","useEffect","useState","axios","KPIChart","jsxDEV","_jsxDEV","HospitalChart","_s","hospitals","setHospitals","selectedHospital","setSelectedHospital","get","then","response","data","catch","error","console","handleSelectHospital","hospital","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","e","hospitalName","target","value","selected","find","name","map","title","monthlyHospitalizations","hosp","labels","month","year","_c","$RefreshReg$"],"sources":["/Users/jellyfish/Desktop/job_assignments/tekkare_assignment/tekkare_assignment/src/components/HospitalChart.tsx"],"sourcesContent":["// src/components/HospitalChart.tsx\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport KPIChart from './KPIChart';\n\n// Define types for better TypeScript support\ninterface MonthlyHospitalization {\n  month: string;\n  year: number;\n  value: number;\n}\n\ninterface Hospital {\n  name: string;\n  monthlyHospitalizations: MonthlyHospitalization[];\n}\n\nconst HospitalChart: React.FC = () => {\n  const [hospitals, setHospitals] = useState<Hospital[]>([]);\n  const [selectedHospital, setSelectedHospital] = useState<Hospital | null>(null);\n\n  // Fetch data using Axios\n  useEffect(() => {\n    axios\n      .get('/path/to/data_exemple1.JSON')\n      .then(response => {\n        setHospitals(response.data); // Assuming data_exemple1.JSON is a list of hospitals\n      })\n      .catch(error => {\n        console.error('Error fetching the hospital data:', error);\n      });\n  }, []);\n\n  // Handle hospital selection\n  const handleSelectHospital = (hospital: Hospital) => {\n    setSelectedHospital(hospital);\n  };\n\n  return (\n    <div className=\"container mx-auto p-8\">\n      <h1 className=\"text-3xl font-bold mb-8 text-center\">Hospitalizations by Hospital</h1>\n\n      {/* Dropdown for selecting hospital */}\n      <div className=\"mb-6\">\n        <label htmlFor=\"hospital-select\" className=\"block mb-2\">Select a hospital:</label>\n        <select\n          id=\"hospital-select\"\n          className=\"block w-full p-2 border rounded\"\n          onChange={e => {\n            const hospitalName = e.target.value;\n            const selected = hospitals.find(hospital => hospital.name === hospitalName);\n            if (selected) handleSelectHospital(selected);\n          }}\n        >\n          <option value=\"\">-- Select a hospital --</option>\n          {hospitals.map(hospital => (\n            <option key={hospital.name} value={hospital.name}>\n              {hospital.name}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {/* Show the chart if a hospital is selected */}\n      {selectedHospital && (\n        <KPIChart\n          title={`Monthly Hospitalizations at ${selectedHospital.name}`}\n          data={selectedHospital.monthlyHospitalizations.map(hosp => hosp.value)}\n          labels={selectedHospital.monthlyHospitalizations.map(hosp => `${hosp.month} ${hosp.year}`)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default HospitalChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}